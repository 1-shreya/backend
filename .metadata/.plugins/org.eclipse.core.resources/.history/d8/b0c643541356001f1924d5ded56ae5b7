package com.example.Healthcare.Controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.Healthcare.Entity.CoverageType;
import com.example.Healthcare.Services.CoverageTypeService;

@RestController
@RequestMapping("/api/coveragetypes")
public class CoverageTypeController {
	@Autowired
private CoverageTypeService coverageTypeService;
@GetMapping
public ResponseEntity<List<CoverageType>> getAllCoverageTypes() {
    List<CoverageType> coverageTypes = coverageTypeService.getAllCoverageTypes();
    return new ResponseEntity<>(coverageTypes, HttpStatus.OK);
}

@GetMapping("/{id}")
public ResponseEntity<CoverageType> getCoverageTypeById(@PathVariable int id) {
    Optional<CoverageType> coverageType = coverageTypeService.getCoverageTypeById(id);
    return coverageType.map(value -> new ResponseEntity<>(value, HttpStatus.OK))
            .orElseGet(() -> new ResponseEntity<>(HttpStatus.NOT_FOUND));
}

@PostMapping
public ResponseEntity<CoverageType> createCoverageType(@RequestBody CoverageType coverageType) {
    CoverageType savedCoverageType = coverageTypeService.saveCoverageType(coverageType);
    return new ResponseEntity<>(savedCoverageType, HttpStatus.CREATED);
}

@PutMapping("/{id}")
public ResponseEntity<CoverageType> updateCoverageType(@PathVariable int id, @RequestBody CoverageType coverageType) {
    Optional<CoverageType> existingCoverageType = coverageTypeService.getCoverageTypeById(id);
    if (existingCoverageType.isPresent()) {
        coverageType.setCoverage_id(id);
        CoverageType updatedCoverageType = coverageTypeService.saveCoverageType(coverageType);
        return new ResponseEntity<>(updatedCoverageType, HttpStatus.OK);
    } else {
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
}

@DeleteMapping("/{id}")
public ResponseEntity<HttpStatus> deleteCoverageType(@PathVariable int id) {
    Optional<CoverageType> coverageType = coverageTypeService.getCoverageTypeById(id);
    if (coverageType.isPresent()) {
        coverageTypeService.deleteCoverageTypeById(id);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    } else {
        return new ResponseEntity<>(HttpStatus.NOT_FOUND);
    }
}
}
